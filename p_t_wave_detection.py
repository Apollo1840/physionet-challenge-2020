# basic libs
import pandas as pd
import numpy as np
import json
from sklearn.model_selection import KFold
import os
import gc
from tqdm import tqdm
from shutil import rmtree
from sklearn.preprocessing import MinMaxScaler
from scipy.signal import resample
from scipy.signal import medfilt

# pytorch
from torch import nn
import torch




class PTWaveDetection(nn.Module):
    def __init__(self):
        super().__init__()

        #LPF 10Hz cut-off 183th order, 500Hz Fs
    #     self.weights_LPF = torch.Tensor(np.array([
    # 0.005147253186369931,
    # 0.0006001765769542481,
    # 0.0005957445771258005,
    # 0.0005643086504273054,
    # 0.0005073683102994957,
    # 0.0004168640295718163,
    # 0.00029763915827185915,
    # 0.0001482689335965152,
    # -0.000027505951495896306,
    # -0.00022849356742868945,
    # -0.0004501723348493552,
    # -0.0006890876767805101,
    # -0.0009393487476801298,
    # -0.0011955592042101487,
    # -0.0014505696936014537,
    # -0.0016976259222411228,
    # -0.0019288580019146378,
    # -0.0021369424746785896,
    # -0.002314045382836902,
    # -0.0024531471809736446,
    # -0.0025472772506183764,
    # -0.0025905911518138577,
    # -0.002577801247383038,
    # -0.002505063073376166,
    # -0.002369537005532682,
    # -0.0021701119240859685,
    # -0.0019070408559748555,
    # -0.0015825058470155702,
    # -0.0012002736544421055,
    # -0.0007660941751966129,
    # -0.00028733320991901156,
    # 0.00022679884937598633,
    # 0.0007656600994852737,
    # 0.0013171076063630512,
    # 0.0018679579431778684,
    # 0.0024040534807050692,
    # 0.0029107576809660825,
    # 0.0033731281622131283,
    # 0.0037764279019367633,
    # 0.00410637521855674,
    # 0.004349648479896265,
    # 0.004494180904211606,
    # 0.004529629783978969,
    # 0.004447677618763408,
    # 0.004242427857765367,
    # 0.003910667589228659,
    # 0.003452146930041853,
    # 0.002869759725983823,
    # 0.0021696690806577187,
    # 0.0013613746127321144,
    # 0.0004576616603374885,
    # -0.0005254576958594755,
    # -0.0015689767060911419,
    # -0.002651075005929978,
    # -0.0037475244558531073,
    # -0.004831977682375602,
    # -0.0058765338832791735,
    # -0.006852113495160874,
    # -0.007729164300408785,
    # -0.008478090613493245,
    # -0.009070068419282097,
    # -0.00947748027734396,
    # -0.009674791780672773,
    # -0.00963892446964298,
    # -0.009350133808711109,
    # -0.008792242517898334,
    # -0.007953463057204655,
    # -0.0068264199397771765,
    # -0.00540888003775351,
    # -0.0037035107632508437,
    # -0.0017185111221721797,
    # 0.0005329298714427934,
    # 0.003032081918855423,
    # 0.00575554614051979,
    # 0.00867474559338462,
    # 0.01175717178014931,
    # 0.014965859511134317,
    # 0.018261069801587305,
    # 0.021599651926509717,
    # 0.024937249580734323,
    # 0.028227372383871064,
    # 0.031424258373093726,
    # 0.03448133262306001,
    # 0.03735498925333703,
    # 0.040001843561952306,
    # 0.042384076169781834,
    # 0.04446422871914973,
    # 0.04621395683012893,
    # 0.04760273217408125,
    # 0.04861731293654616,
    # 0.04921726493491512,
    # 0.049420592886497104,
    # 0.04921726493491512,
    # 0.04861731293654616,
    # 0.04760273217408125,
    # 0.04621395683012893,
    # 0.04446422871914973,
    # 0.042384076169781834,
    # 0.040001843561952306,
    # 0.03735498925333703,
    # 0.03448133262306001,
    # 0.031424258373093726,
    # 0.028227372383871064,
    # 0.024937249580734323,
    # 0.021599651926509717,
    # 0.018261069801587305,
    # 0.014965859511134317,
    # 0.01175717178014931,
    # 0.00867474559338462,
    # 0.00575554614051979,
    # 0.003032081918855423,
    # 0.0005329298714427934,
    # -0.0017185111221721797,
    # -0.0037035107632508437,
    # -0.00540888003775351,
    # -0.0068264199397771765,
    # -0.007953463057204655,
    # -0.008792242517898334,
    # -0.009350133808711109,
    # -0.00963892446964298,
    # -0.009674791780672773,
    # -0.00947748027734396,
    # -0.009070068419282097,
    # -0.008478090613493245,
    # -0.007729164300408785,
    # -0.006852113495160874,
    # -0.0058765338832791735,
    # -0.004831977682375602,
    # -0.0037475244558531073,
    # -0.002651075005929978,
    # -0.0015689767060911419,
    # -0.0005254576958594755,
    # 0.0004576616603374885,
    # 0.0013613746127321144,
    # 0.0021696690806577187,
    # 0.002869759725983823,
    # 0.003452146930041853,
    # 0.003910667589228659,
    # 0.004242427857765367,
    # 0.004447677618763408,
    # 0.004529629783978969,
    # 0.004494180904211606,
    # 0.004349648479896265,
    # 0.00410637521855674,
    # 0.0037764279019367633,
    # 0.0033731281622131283,
    # 0.0029107576809660825,
    # 0.0024040534807050692,
    # 0.0018679579431778684,
    # 0.0013171076063630512,
    # 0.0007656600994852737,
    # 0.00022679884937598633,
    # -0.00028733320991901156,
    # -0.0007660941751966129,
    # -0.0012002736544421055,
    # -0.0015825058470155702,
    # -0.0019070408559748555,
    # -0.0021701119240859685,
    # -0.002369537005532682,
    # -0.002505063073376166,
    # -0.002577801247383038,
    # -0.0025905911518138577,
    # -0.0025472772506183764,
    # -0.0024531471809736446,
    # -0.002314045382836902,
    # -0.0021369424746785896,
    # -0.0019288580019146378,
    # -0.0016976259222411228,
    # -0.0014505696936014537,
    # -0.0011955592042101487,
    # -0.0009393487476801298,
    # -0.0006890876767805101,
    # -0.0004501723348493552,
    # -0.00022849356742868945,
    # -0.000027505951495896306,
    # 0.0001482689335965152,
    # 0.00029763915827185915,
    # 0.0004168640295718163,
    # 0.0005073683102994957,
    # 0.0005643086504273054,
    # 0.0005957445771258005,
    # 0.0006001765769542481,
    # 0.005147253186369931
    # ])).cuda()
    #     self.weights_LPF = self.weights_LPF.view(1, 1, self.weights_LPF.shape[0])
    #     self.padding_LPF = int((self.weights_LPF.shape[2] - 1) / 2)
    #     self.padding_LPF = torch.Tensor(np.zeros((self.padding_LPF))).cuda()

        #moving average
        self.weights_LPF = torch.Tensor(np.array([1]*31)).cuda()
        self.weights_LPF = self.weights_LPF.view(1, 1, self.weights_LPF.shape[0])
        self.padding_LPF = int((self.weights_LPF.shape[2] - 1) / 2)
        self.padding_LPF = torch.Tensor(np.zeros((self.padding_LPF))).cuda()

#         # LPF 10Hz cut-off 91th order, 500Hz Fs
#         self.weights_LPF = torch.Tensor(np.array([
#   0.005623864163492965,
#   0.0020179748486017003,
#   0.0022654907036785306,
#   0.002456974291160318,
#   0.0025558795531767844,
#   0.0025491297737270675,
#   0.0024212669006267043,
#   0.0021571933039567603,
#   0.0017455530533680263,
#   0.001180975842367208,
#   0.00046520144618786714,
#   -0.00039257584055641385,
#   -0.0013757469407066948,
#   -0.0024604178271875744,
#   -0.003615524334335699,
#   -0.004803011180847129,
#   -0.005978257088325843,
#   -0.007090918140625752,
#   -0.008086262345304289,
#   -0.008906938405656425,
#   -0.009495023709481437,
#   -0.009794168071872255,
#   -0.009751689750971905,
#   -0.009320555325867716,
#   -0.008461240270924375,
#   -0.0071434894387636715,
#   -0.0053479696367205376,
#   -0.003067749970882768,
#   -0.00030949315473962274,
#   0.0029057782636641547,
#   0.006542451644516093,
#   0.010550681602685881,
#   0.014867317780545227,
#   0.019417333157525012,
#   0.024115661150927097,
#   0.028869357302016375,
#   0.03358002363193412,
#   0.03814645183606916,
#   0.042467441840394984,
#   0.04644473269100695,
#   0.04998595224126883,
#   0.05300746526150141,
#   0.05543698920659681,
#   0.05721585805545426,
#   0.058300843186742286,
#   0.058665475489666906,
#   0.058300843186742286,
#   0.05721585805545426,
#   0.05543698920659681,
#   0.05300746526150141,
#   0.04998595224126883,
#   0.04644473269100695,
#   0.042467441840394984,
#   0.03814645183606916,
#   0.03358002363193412,
#   0.028869357302016375,
#   0.024115661150927097,
#   0.019417333157525012,
#   0.014867317780545227,
#   0.010550681602685881,
#   0.006542451644516093,
#   0.0029057782636641547,
#   -0.00030949315473962274,
#   -0.003067749970882768,
#   -0.0053479696367205376,
#   -0.0071434894387636715,
#   -0.008461240270924375,
#   -0.009320555325867716,
#   -0.009751689750971905,
#   -0.009794168071872255,
#   -0.009495023709481437,
#   -0.008906938405656425,
#   -0.008086262345304289,
#   -0.007090918140625752,
#   -0.005978257088325843,
#   -0.004803011180847129,
#   -0.003615524334335699,
#   -0.0024604178271875744,
#   -0.0013757469407066948,
#   -0.00039257584055641385,
#   0.00046520144618786714,
#   0.001180975842367208,
#   0.0017455530533680263,
#   0.0021571933039567603,
#   0.0024212669006267043,
#   0.0025491297737270675,
#   0.0025558795531767844,
#   0.002456974291160318,
#   0.0022654907036785306,
#   0.0020179748486017003,
#   0.005623864163492965
# ])).cuda()
#         self.weights_LPF = self.weights_LPF.view(1, 1, self.weights_LPF.shape[0])
#         self.padding_LPF = int((self.weights_LPF.shape[2] - 1) / 2)
#         self.padding_LPF = torch.Tensor(np.zeros((self.padding_LPF))).cuda()
#
#         # LPF 15Hz cut-off 91th order, 500Hz Fs
#         self.weights_LPF = torch.Tensor(np.array([
#   -0.005812464348043296,
#   -0.0016700935071216714,
#   -0.00169335005050194,
#   -0.001577135184067894,
#   -0.0012720372028865736,
#   -0.0007765636711797643,
#   -0.00009995906539939285,
#   0.0007367276399277568,
#   0.001697463067062195,
#   0.0027312239292927756,
#   0.0037740199450815204,
#   0.004750888081215525,
#   0.005579295160663874,
#   0.006175406954545023,
#   0.006461146310307057,
#   0.006369949057755616,
#   0.005852259838314326,
#   0.004881718822761123,
#   0.003460352192760668,
#   0.0016213804111558678,
#   -0.0005694825176838954,
#   -0.0030137196204821754,
#   -0.005581909315832288,
#   -0.00811848131392123,
#   -0.010448450806445145,
#   -0.012385555928582521,
#   -0.01374200188965982,
#   -0.0143393816775493,
#   -0.014019676721656606,
#   -0.01265567797912001,
#   -0.010160441665123253,
#   -0.006495042893375783,
#   -0.0016740005385487522,
#   0.004231808669610867,
#   0.011095044048922338,
#   0.018735020222320677,
#   0.026923932630327482,
#   0.035395722795155314,
#   0.04385737554267897,
#   0.05200232534084815,
#   0.0595250255928036,
#   0.06613564879235871,
#   0.07157428105189459,
#   0.07562392330781342,
#   0.07812136750464589,
#   0.07896530025196317,
#   0.07812136750464589,
#   0.07562392330781342,
#   0.07157428105189459,
#   0.06613564879235871,
#   0.0595250255928036,
#   0.05200232534084815,
#   0.04385737554267897,
#   0.035395722795155314,
#   0.026923932630327482,
#   0.018735020222320677,
#   0.011095044048922338,
#   0.004231808669610867,
#   -0.0016740005385487522,
#   -0.006495042893375783,
#   -0.010160441665123253,
#   -0.01265567797912001,
#   -0.014019676721656606,
#   -0.0143393816775493,
#   -0.01374200188965982,
#   -0.012385555928582521,
#   -0.010448450806445145,
#   -0.00811848131392123,
#   -0.005581909315832288,
#   -0.0030137196204821754,
#   -0.0005694825176838954,
#   0.0016213804111558678,
#   0.003460352192760668,
#   0.004881718822761123,
#   0.005852259838314326,
#   0.006369949057755616,
#   0.006461146310307057,
#   0.006175406954545023,
#   0.005579295160663874,
#   0.004750888081215525,
#   0.0037740199450815204,
#   0.0027312239292927756,
#   0.001697463067062195,
#   0.0007367276399277568,
#   -0.00009995906539939285,
#   -0.0007765636711797643,
#   -0.0012720372028865736,
#   -0.001577135184067894,
#   -0.00169335005050194,
#   -0.0016700935071216714,
#   -0.005812464348043296
# ])).cuda()
#         self.weights_LPF = self.weights_LPF.view(1, 1, self.weights_LPF.shape[0])
#         self.padding_LPF = int((self.weights_LPF.shape[2] - 1) / 2)
#         self.padding_LPF = torch.Tensor(np.zeros((self.padding_LPF))).cuda()


    def peakdet(self,v, delta: float):

        # list of peaks
        maxtab = []
        mintab = []

        x = np.arange(v.shape[0])

        assert delta > 0, 'Delta should be positive'

        mn = np.inf
        mx = -np.inf;
        mnpos = np.nan
        mxpos = np.nan

        lookformax = True

        for i in range(v.shape[0]):
            this = v[i]
            if this > mx:
                mx = this
                mxpos = x[i]
            if this < mn:
                mn = this
                mnpos = x[i]
            if lookformax:
                if this < mx - delta:
                    maxtab.append([mxpos, mx])
                    mn = this
                    mnpos = x[i]
                    lookformax = False
            else:
                if this > mn + delta:
                    mintab.append([mnpos, mn])
                    mx = this
                    mxpos = x[i]
                    lookformax = True

        return maxtab, mintab


    def FIR_filt(self, input, weight,padding_vector):
        input = torch.cat((input, padding_vector), 0)
        input = torch.cat((padding_vector, input), 0)
        input = input.view(1, 1, input.shape[0])
        output = torch.conv1d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1)
        output = output.view(output.shape[2])
        return output

    def forward(self, x):

        # LPF for p and T waves cleaning
        x_filt = self.FIR_filt(x,self.weights_LPF,self.padding_LPF)

        #standard scaling
        x_filt = (x_filt - torch.mean(x_filt)) / torch.std(x_filt)

        return x_filt

    def run(self, X,rpeaks):



        self.eval()
        X = torch.tensor(X, dtype=torch.float)
        X = X.cuda()
        X_filt = self.forward(X)
        X = X.cpu().detach().numpy()
        X_filt = X_filt.cpu().detach().numpy()
        X_filt = X_filt - medfilt(X_filt, 501)

        twaves = []
        pwaves = []

        for i in range(len(rpeaks)):

            if i == 0:
                PR = X_filt[0:rpeaks[i]].copy()
                RT = X_filt[rpeaks[i]:int(rpeaks[i] +3*(rpeaks[i+1] - rpeaks[i])/4 )].copy()
            elif i == len(rpeaks)-1:
                PR = X_filt[int(rpeaks[i] - 1*(rpeaks[i] - rpeaks[i-1])/4 ):rpeaks[i]].copy()
                RT = X_filt[rpeaks[i]:].copy()
            else:
                PR = X_filt[int(rpeaks[i] - 1*(rpeaks[i] - rpeaks[i-1])/4 ):rpeaks[i]].copy()
                RT = X_filt[rpeaks[i]:int(rpeaks[i] +3*(rpeaks[i+1] - rpeaks[i])/4 )].copy()

            PR /= max(PR)
            RT /= max(RT)

            T_wave,_ = self.peakdet(RT, 1/6)
            P_wave,_ = self.peakdet(PR, 0.1/6)


            if len(T_wave)>1:
                T_wave = T_wave[1]
                twaves.append(rpeaks[i]+T_wave[0])


            if len(P_wave)>0:
                # print(len(PR))
                # print(P_wave[-1][0])
                if len(PR) - P_wave[-1][0] < 45:
                    del P_wave[-1]
                if len(P_wave)>0:
                    P_wave = P_wave[-1]
                    if i == 0:
                        pwaves.append(P_wave[0])
                    else:
                        pwaves.append(int(rpeaks[i] - 1*(rpeaks[i] - rpeaks[i-1])/4 )+P_wave[0])





        for i in range(len(twaves)):
            twaves[i] = [twaves[i],X[twaves[i]]]

        twaves = np.array(twaves)

        for i in range(len(pwaves)):
            pwaves[i] = [pwaves[i],X[pwaves[i]]]

        twaves = np.array(twaves)
        pwaves = np.array(pwaves) 
        return twaves,pwaves,X_filt
